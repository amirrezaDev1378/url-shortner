// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0

package dbQueries

import (
	"database/sql/driver"
	"fmt"

	"github.com/jackc/pgx/v5/pgtype"
)

type ValidUrlTypes string

const (
	ValidUrlTypesDirect ValidUrlTypes = "direct"
	ValidUrlTypesStatic ValidUrlTypes = "static"
)

func (e *ValidUrlTypes) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = ValidUrlTypes(s)
	case string:
		*e = ValidUrlTypes(s)
	default:
		return fmt.Errorf("unsupported scan type for ValidUrlTypes: %T", src)
	}
	return nil
}

type NullValidUrlTypes struct {
	ValidUrlTypes ValidUrlTypes `json:"valid_url_types"`
	Valid         bool          `json:"valid"` // Valid is true if ValidUrlTypes is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullValidUrlTypes) Scan(value interface{}) error {
	if value == nil {
		ns.ValidUrlTypes, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.ValidUrlTypes.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullValidUrlTypes) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.ValidUrlTypes), nil
}

type StaticUrl struct {
	ID             pgtype.UUID `json:"id"`
	UpdatedAt      pgtype.Date `json:"updated_at"`
	UrlID          int32       `json:"url_id"`
	GeneralContent string      `json:"general_content"`
	IosContent     pgtype.Text `json:"ios_content"`
}

type Url struct {
	ID                  int32         `json:"id"`
	CreatedAt           pgtype.Date   `json:"created_at"`
	UpdatedAt           pgtype.Date   `json:"updated_at"`
	CreatedBy           pgtype.UUID   `json:"created_by"`
	ExpiresAt           pgtype.Date   `json:"expires_at"`
	Disabled            bool          `json:"disabled"`
	Deleted             bool          `json:"deleted"`
	Slug                string        `json:"slug"`
	GeneralRedirectPath string        `json:"general_redirect_path"`
	IosRedirectPath     pgtype.Text   `json:"ios_redirect_path"`
	Type                ValidUrlTypes `json:"type"`
}

type User struct {
	ID                   pgtype.UUID      `json:"id"`
	CreatedAt            pgtype.Timestamp `json:"created_at"`
	UpdatedAt            pgtype.Timestamp `json:"updated_at"`
	LastLogin            pgtype.Timestamp `json:"last_login"`
	Email                string           `json:"email"`
	Password             string           `json:"password"`
	Avatar               pgtype.Text      `json:"avatar"`
	LoginAttempts        int32            `json:"login_attempts"`
	LockedUntil          pgtype.Timestamp `json:"locked_until"`
	CreatedByOauth       pgtype.Bool      `json:"created_by_oauth"`
	ResetPasswordToken   pgtype.Text      `json:"reset_password_token"`
	ResetPasswordExpires pgtype.Date      `json:"reset_password_expires"`
}
