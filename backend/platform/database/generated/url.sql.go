// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: url.sql

package dbQueries

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createRandomSlug = `-- name: CreateRandomSlug :one
INSERT INTO urls (slug, general_redirect_path, type, expires_at,disabled)
VALUES (
           (SELECT base62_encode(COUNT(*)) FROM urls),
           '',
           'temp-slug',
           NOW() + INTERVAL '30 minutes',
           true
       )
RETURNING slug
`

func (q *Queries) CreateRandomSlug(ctx context.Context) (string, error) {
	row := q.db.QueryRow(ctx, createRandomSlug)
	var slug string
	err := row.Scan(&slug)
	return slug, err
}

const createStaticUrl = `-- name: CreateStaticUrl :exec
INSERT INTO static_urls (url_id, general_content, ios_content)
VALUES ($1, $2, $3)
`

type CreateStaticUrlParams struct {
	UrlID          int32       `json:"url_id"`
	GeneralContent string      `json:"general_content"`
	IosContent     pgtype.Text `json:"ios_content"`
}

func (q *Queries) CreateStaticUrl(ctx context.Context, arg CreateStaticUrlParams) error {
	_, err := q.db.Exec(ctx, createStaticUrl, arg.UrlID, arg.GeneralContent, arg.IosContent)
	return err
}

const createUrl = `-- name: CreateUrl :one
INSERT INTO urls (created_by, slug, general_redirect_path, ios_redirect_path, type, expires_at)
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id
`

type CreateUrlParams struct {
	CreatedBy           pgtype.UUID      `json:"created_by"`
	Slug                string           `json:"slug"`
	GeneralRedirectPath string           `json:"general_redirect_path"`
	IosRedirectPath     pgtype.Text      `json:"ios_redirect_path"`
	Type                ValidUrlTypes    `json:"type"`
	ExpiresAt           pgtype.Timestamp `json:"expires_at"`
}

func (q *Queries) CreateUrl(ctx context.Context, arg CreateUrlParams) (int32, error) {
	row := q.db.QueryRow(ctx, createUrl,
		arg.CreatedBy,
		arg.Slug,
		arg.GeneralRedirectPath,
		arg.IosRedirectPath,
		arg.Type,
		arg.ExpiresAt,
	)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const deleteExpiredTempSlugs = `-- name: DeleteExpiredTempSlugs :exec
DELETE FROM urls
WHERE expires_at < (NOW())
  AND (type = 'temp-slug')
`

func (q *Queries) DeleteExpiredTempSlugs(ctx context.Context) error {
	_, err := q.db.Exec(ctx, deleteExpiredTempSlugs)
	return err
}

const deleteExpiredUrls = `-- name: DeleteExpiredUrls :exec
UPDATE urls
SET deleted  = TRUE,
    disabled = TRUE
WHERE expires_at < (NOW() + $1)
AND type != 'temp-slug'
AND (deleted != TRUE OR disabled != TRUE)
`

func (q *Queries) DeleteExpiredUrls(ctx context.Context, dollar_1 interface{}) error {
	_, err := q.db.Exec(ctx, deleteExpiredUrls, dollar_1)
	return err
}

const deleteStaticUrlByOwnerID = `-- name: DeleteStaticUrlByOwnerID :exec
DELETE FROM static_urls
WHERE url_id = $1
`

func (q *Queries) DeleteStaticUrlByOwnerID(ctx context.Context, urlID int32) error {
	_, err := q.db.Exec(ctx, deleteStaticUrlByOwnerID, urlID)
	return err
}

const deleteUrlByID = `-- name: DeleteUrlByID :exec
DELETE
FROM urls
WHERE id = $1
`

func (q *Queries) DeleteUrlByID(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteUrlByID, id)
	return err
}

const getStaticUrlByUrlID = `-- name: GetStaticUrlByUrlID :one
SELECT id, updated_at, url_id, general_content, ios_content
FROM static_urls
WHERE url_id = $1
`

func (q *Queries) GetStaticUrlByUrlID(ctx context.Context, urlID int32) (StaticUrl, error) {
	row := q.db.QueryRow(ctx, getStaticUrlByUrlID, urlID)
	var i StaticUrl
	err := row.Scan(
		&i.ID,
		&i.UpdatedAt,
		&i.UrlID,
		&i.GeneralContent,
		&i.IosContent,
	)
	return i, err
}

const getStaticUrlGeneralContent = `-- name: GetStaticUrlGeneralContent :one
SELECT general_content
FROM static_urls
WHERE url_id = (SELECT id FROM urls WHERE slug = $1 AND deleted = false AND disabled = false)
`

func (q *Queries) GetStaticUrlGeneralContent(ctx context.Context, slug string) (string, error) {
	row := q.db.QueryRow(ctx, getStaticUrlGeneralContent, slug)
	var general_content string
	err := row.Scan(&general_content)
	return general_content, err
}

const getStaticUrlIOSContent = `-- name: GetStaticUrlIOSContent :one
SELECT ios_content
FROM static_urls
WHERE url_id = (SELECT id FROM urls WHERE slug = $1 AND deleted = false AND disabled = false)
`

func (q *Queries) GetStaticUrlIOSContent(ctx context.Context, slug string) (pgtype.Text, error) {
	row := q.db.QueryRow(ctx, getStaticUrlIOSContent, slug)
	var ios_content pgtype.Text
	err := row.Scan(&ios_content)
	return ios_content, err
}

const getUrlById = `-- name: GetUrlById :one
SELECT id,
       slug,
       general_redirect_path,
       ios_redirect_path,
       created_at,
       created_by,
       type,
       deleted,
       disabled,
       expires_at
FROM urls
WHERE id = $1 AND deleted = false
`

type GetUrlByIdRow struct {
	ID                  int32            `json:"id"`
	Slug                string           `json:"slug"`
	GeneralRedirectPath string           `json:"general_redirect_path"`
	IosRedirectPath     pgtype.Text      `json:"ios_redirect_path"`
	CreatedAt           pgtype.Timestamp `json:"created_at"`
	CreatedBy           pgtype.UUID      `json:"created_by"`
	Type                ValidUrlTypes    `json:"type"`
	Deleted             bool             `json:"deleted"`
	Disabled            bool             `json:"disabled"`
	ExpiresAt           pgtype.Timestamp `json:"expires_at"`
}

func (q *Queries) GetUrlById(ctx context.Context, id int32) (GetUrlByIdRow, error) {
	row := q.db.QueryRow(ctx, getUrlById, id)
	var i GetUrlByIdRow
	err := row.Scan(
		&i.ID,
		&i.Slug,
		&i.GeneralRedirectPath,
		&i.IosRedirectPath,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.Type,
		&i.Deleted,
		&i.Disabled,
		&i.ExpiresAt,
	)
	return i, err
}

const getUrlBySlug = `-- name: GetUrlBySlug :one
SELECT general_redirect_path, ios_redirect_path, expires_at
FROM urls
WHERE slug = $1 AND deleted = false AND disabled = false
`

type GetUrlBySlugRow struct {
	GeneralRedirectPath string           `json:"general_redirect_path"`
	IosRedirectPath     pgtype.Text      `json:"ios_redirect_path"`
	ExpiresAt           pgtype.Timestamp `json:"expires_at"`
}

func (q *Queries) GetUrlBySlug(ctx context.Context, slug string) (GetUrlBySlugRow, error) {
	row := q.db.QueryRow(ctx, getUrlBySlug, slug)
	var i GetUrlBySlugRow
	err := row.Scan(&i.GeneralRedirectPath, &i.IosRedirectPath, &i.ExpiresAt)
	return i, err
}

const getUrlsByUser = `-- name: GetUrlsByUser :many
SELECT id, slug, ios_redirect_path, general_redirect_path, created_at, disabled
FROM urls
WHERE created_by = $1 AND deleted = false
ORDER BY created_at DESC
LIMIT $2
`

type GetUrlsByUserParams struct {
	CreatedBy pgtype.UUID `json:"created_by"`
	Limit     int32       `json:"limit"`
}

type GetUrlsByUserRow struct {
	ID                  int32            `json:"id"`
	Slug                string           `json:"slug"`
	IosRedirectPath     pgtype.Text      `json:"ios_redirect_path"`
	GeneralRedirectPath string           `json:"general_redirect_path"`
	CreatedAt           pgtype.Timestamp `json:"created_at"`
	Disabled            bool             `json:"disabled"`
}

func (q *Queries) GetUrlsByUser(ctx context.Context, arg GetUrlsByUserParams) ([]GetUrlsByUserRow, error) {
	rows, err := q.db.Query(ctx, getUrlsByUser, arg.CreatedBy, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetUrlsByUserRow
	for rows.Next() {
		var i GetUrlsByUserRow
		if err := rows.Scan(
			&i.ID,
			&i.Slug,
			&i.IosRedirectPath,
			&i.GeneralRedirectPath,
			&i.CreatedAt,
			&i.Disabled,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateStaticUrl = `-- name: UpdateStaticUrl :exec
UPDATE static_urls
SET general_content = $1 AND ios_content = $2
WHERE url_id = $3
`

type UpdateStaticUrlParams struct {
	GeneralContent string      `json:"general_content"`
	IosContent     pgtype.Text `json:"ios_content"`
	UrlID          int32       `json:"url_id"`
}

func (q *Queries) UpdateStaticUrl(ctx context.Context, arg UpdateStaticUrlParams) error {
	_, err := q.db.Exec(ctx, updateStaticUrl, arg.GeneralContent, arg.IosContent, arg.UrlID)
	return err
}

const updateUrlProps = `-- name: UpdateUrlProps :exec
UPDATE urls
SET updated_at = NOW(),
    deleted    = COALESCE($1, deleted),
    disabled   = COALESCE($2, disabled)
WHERE id = $3
`

type UpdateUrlPropsParams struct {
	Deleted  bool  `json:"deleted"`
	Disabled bool  `json:"disabled"`
	ID       int32 `json:"id"`
}

func (q *Queries) UpdateUrlProps(ctx context.Context, arg UpdateUrlPropsParams) error {
	_, err := q.db.Exec(ctx, updateUrlProps, arg.Deleted, arg.Disabled, arg.ID)
	return err
}
