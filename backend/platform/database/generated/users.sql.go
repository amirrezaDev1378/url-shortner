// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: users.sql

package dbQueries

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const checkUserExists = `-- name: CheckUserExists :one
SELECT EXISTS (SELECT 1 FROM USERS WHERE EMAIL = $1) AS USER_EXISTS
`

func (q *Queries) CheckUserExists(ctx context.Context, email string) (bool, error) {
	row := q.db.QueryRow(ctx, checkUserExists, email)
	var user_exists bool
	err := row.Scan(&user_exists)
	return user_exists, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO USERS (ID, CREATED_AT, UPDATED_AT, LAST_LOGIN, PASSWORD, CREATED_BY_OAUTH, EMAIL, RESET_PASSWORD_EXPIRES,
                   AVATAR,NAME)
VALUES (UUID_GENERATE_V4(), NOW(), NOW(), NOW(), $1, $2, $3, NULL, $4 , $5)
RETURNING ID
`

type CreateUserParams struct {
	Password       string      `json:"password"`
	CreatedByOauth pgtype.Bool `json:"created_by_oauth"`
	Email          string      `json:"email"`
	Avatar         pgtype.Text `json:"avatar"`
	Name           string      `json:"name"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (pgtype.UUID, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.Password,
		arg.CreatedByOauth,
		arg.Email,
		arg.Avatar,
		arg.Name,
	)
	var id pgtype.UUID
	err := row.Scan(&id)
	return id, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, created_at, updated_at, last_login, email, password, avatar, login_attempts, locked_until, created_by_oauth, reset_password_token, reset_password_expires, name FROM USERS WHERE EMAIL = $1 LIMIT 1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.LastLogin,
		&i.Email,
		&i.Password,
		&i.Avatar,
		&i.LoginAttempts,
		&i.LockedUntil,
		&i.CreatedByOauth,
		&i.ResetPasswordToken,
		&i.ResetPasswordExpires,
		&i.Name,
	)
	return i, err
}

const getUserById = `-- name: GetUserById :one
SELECT id, created_at, updated_at, last_login, email, password, avatar, login_attempts, locked_until, created_by_oauth, reset_password_token, reset_password_expires, name
FROM USERS
WHERE ID = $1
LIMIT 1
`

func (q *Queries) GetUserById(ctx context.Context, id pgtype.UUID) (User, error) {
	row := q.db.QueryRow(ctx, getUserById, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.LastLogin,
		&i.Email,
		&i.Password,
		&i.Avatar,
		&i.LoginAttempts,
		&i.LockedUntil,
		&i.CreatedByOauth,
		&i.ResetPasswordToken,
		&i.ResetPasswordExpires,
		&i.Name,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :exec
UPDATE USERS
SET UPDATED_AT             = NOW(),
    PASSWORD               = COALESCE($1, PASSWORD),
    AVATAR                 = COALESCE($2, AVATAR),
    RESET_PASSWORD_TOKEN   = COALESCE($3, RESET_PASSWORD_TOKEN),
    RESET_PASSWORD_EXPIRES = COALESCE($4, RESET_PASSWORD_EXPIRES)
WHERE ID = $5
`

type UpdateUserParams struct {
	Password             string      `json:"password"`
	Avatar               pgtype.Text `json:"avatar"`
	ResetPasswordToken   pgtype.Text `json:"reset_password_token"`
	ResetPasswordExpires pgtype.Date `json:"reset_password_expires"`
	ID                   pgtype.UUID `json:"id"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.Exec(ctx, updateUser,
		arg.Password,
		arg.Avatar,
		arg.ResetPasswordToken,
		arg.ResetPasswordExpires,
		arg.ID,
	)
	return err
}
