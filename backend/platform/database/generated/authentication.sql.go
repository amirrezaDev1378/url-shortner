// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: authentication.sql

package dbQueries

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const updateFailedLoginAttempts = `-- name: UpdateFailedLoginAttempts :exec
UPDATE users
SET login_attempts = $1,
    locked_until   = $2
WHERE id = $3
`

type UpdateFailedLoginAttemptsParams struct {
	LoginAttempts int32            `json:"login_attempts"`
	LockedUntil   pgtype.Timestamp `json:"locked_until"`
	ID            pgtype.UUID      `json:"id"`
}

func (q *Queries) UpdateFailedLoginAttempts(ctx context.Context, arg UpdateFailedLoginAttemptsParams) error {
	_, err := q.db.Exec(ctx, updateFailedLoginAttempts, arg.LoginAttempts, arg.LockedUntil, arg.ID)
	return err
}

const userLoginWithCredential = `-- name: UserLoginWithCredential :exec
UPDATE users
SET updated_at = now(),
    locked_until = NULL,
    login_attempts = 0,
    last_login = now()
WHERE id = $1
`

func (q *Queries) UserLoginWithCredential(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, userLoginWithCredential, id)
	return err
}

const userLoginWithOAuth = `-- name: UserLoginWithOAuth :one
UPDATE USERS
SET UPDATED_AT = NOW(),
    LAST_LOGIN = NOW()
WHERE EMAIL = $1
RETURNING ID
`

func (q *Queries) UserLoginWithOAuth(ctx context.Context, email string) (pgtype.UUID, error) {
	row := q.db.QueryRow(ctx, userLoginWithOAuth, email)
	var id pgtype.UUID
	err := row.Scan(&id)
	return id, err
}
